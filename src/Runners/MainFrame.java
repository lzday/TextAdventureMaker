/*
there probably are some redundancies due to the constantly changing nature of this project,
but I simply don't feel like going through everything and reworking it just to make it 
more efficient, so please bear with it
 */
package Runners;

import StoryElements.Book;
import StoryElements.Chapter;
import StoryElements.Node;
import StoryElements.Page;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author 643449
 */
public class MainFrame extends javax.swing.JFrame {

    private Page currentPage;//keeps track of the current page to display
    private Chapter currentChapter;//keeps track of the current Chapter user is working in
    private Book currentBook;//keeps track of the current Book user is working on
    private Node currentNode;//keeps track of the current Node user is working on
    
    public MainFrame() {
        initComponents();
        setLocationRelativeTo(null);
        running(false);
        runningChp(false);
        runningPg(false);
        runningNode(false);
        textAreaBody.setLineWrap(true);
        textAreaBody.setWrapStyleWord(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFramePageEditor = new javax.swing.JInternalFrame();
        textFieldTitle = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaBody = new javax.swing.JTextArea();
        internalFrameEditor = new javax.swing.JInternalFrame();
        tabbedPaneEditor = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        buttonNewPage = new javax.swing.JButton();
        buttonNewChapter = new javax.swing.JButton();
        textFieldChapterTitle = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        buttonDeletePage = new javax.swing.JButton();
        buttonDeleteChapter = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        buttonNewNode = new javax.swing.JButton();
        textFieldNodeTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        buttonDeleteNode = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboChapter = new java.awt.Choice();
        comboPage = new java.awt.Choice();
        internalFrameLayout = new javax.swing.JInternalFrame();
        tabbedPaneLayout = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        listLayout = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listNode = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemNewBook = new javax.swing.JMenuItem();
        menuItemOpenBook = new javax.swing.JMenuItem();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemRename = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItemCloseBook = new javax.swing.JMenuItem();
        menuPreview = new javax.swing.JMenu();
        menuItemPreviewPage = new javax.swing.JMenuItem();
        menuItemPreviewBeginning = new javax.swing.JMenuItem();
        menuItemPreviewChapter = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuItemNewPage = new javax.swing.JMenuItem();
        menuItemNewChapter = new javax.swing.JMenuItem();
        menuItemNewNode = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuItemDeletePage = new javax.swing.JMenuItem();
        menuItemDeleteChapter = new javax.swing.JMenuItem();
        menuItemDeleteNode = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        internalFramePageEditor.setVisible(true);

        textFieldTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldTitleActionPerformed(evt);
            }
        });

        jLabel6.setText("Title:");

        jLabel7.setText("Body:");

        textAreaBody.setColumns(20);
        textAreaBody.setRows(5);
        textAreaBody.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAreaBodyKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(textAreaBody);

        javax.swing.GroupLayout internalFramePageEditorLayout = new javax.swing.GroupLayout(internalFramePageEditor.getContentPane());
        internalFramePageEditor.getContentPane().setLayout(internalFramePageEditorLayout);
        internalFramePageEditorLayout.setHorizontalGroup(
            internalFramePageEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, internalFramePageEditorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(internalFramePageEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textFieldTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, internalFramePageEditorLayout.createSequentialGroup()
                        .addGroup(internalFramePageEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        internalFramePageEditorLayout.setVerticalGroup(
            internalFramePageEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(internalFramePageEditorLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        internalFrameEditor.setVisible(true);

        buttonNewPage.setText("New Page");
        buttonNewPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewPageActionPerformed(evt);
            }
        });

        buttonNewChapter.setText("New Chapter");
        buttonNewChapter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewChapterActionPerformed(evt);
            }
        });

        textFieldChapterTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldChapterTitleActionPerformed(evt);
            }
        });

        jLabel1.setText("Chapter Title:");

        buttonDeletePage.setText("Delete Page");
        buttonDeletePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeletePageActionPerformed(evt);
            }
        });

        buttonDeleteChapter.setText("Delete Chapter");
        buttonDeleteChapter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteChapterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(272, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(textFieldChapterTitle)
                        .addGap(20, 20, 20))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonDeletePage)
                        .addGap(140, 140, 140)
                        .addComponent(buttonDeleteChapter))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonNewPage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonNewChapter, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNewPage)
                    .addComponent(buttonNewChapter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldChapterTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDeletePage)
                    .addComponent(buttonDeleteChapter))
                .addGap(49, 49, 49))
        );

        tabbedPaneEditor.addTab("Edit Chapter", jPanel1);

        jLabel2.setText("Nodes:");

        buttonNewNode.setText("New Node");
        buttonNewNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewNodeActionPerformed(evt);
            }
        });

        textFieldNodeTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldNodeTitleActionPerformed(evt);
            }
        });

        jLabel3.setText("Text Displayed:");

        buttonDeleteNode.setText("Delete Node");
        buttonDeleteNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteNodeActionPerformed(evt);
            }
        });

        jLabel4.setText("Chapter Link:");

        jLabel5.setText("Page Link:");

        comboChapter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboChapterItemStateChanged(evt);
            }
        });

        comboPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboPageItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(textFieldNodeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboChapter, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                    .addComponent(comboPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(46, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(buttonNewNode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonDeleteNode)
                        .addGap(31, 31, 31))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(comboChapter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(57, 57, 57)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(textFieldNodeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNewNode)
                    .addComponent(buttonDeleteNode))
                .addContainerGap())
        );

        tabbedPaneEditor.addTab("Edit Nodes", jPanel2);

        javax.swing.GroupLayout internalFrameEditorLayout = new javax.swing.GroupLayout(internalFrameEditor.getContentPane());
        internalFrameEditor.getContentPane().setLayout(internalFrameEditorLayout);
        internalFrameEditorLayout.setHorizontalGroup(
            internalFrameEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneEditor)
        );
        internalFrameEditorLayout.setVerticalGroup(
            internalFrameEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        internalFrameLayout.setVisible(true);

        listLayout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listLayoutMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listLayout);

        tabbedPaneLayout.addTab("Layout", jScrollPane1);

        listNode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listNodeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listNode);

        tabbedPaneLayout.addTab("Nodes", jScrollPane2);

        javax.swing.GroupLayout internalFrameLayoutLayout = new javax.swing.GroupLayout(internalFrameLayout.getContentPane());
        internalFrameLayout.getContentPane().setLayout(internalFrameLayoutLayout);
        internalFrameLayoutLayout.setHorizontalGroup(
            internalFrameLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneLayout, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        internalFrameLayoutLayout.setVerticalGroup(
            internalFrameLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneLayout, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        menuFile.setText("File");

        menuItemNewBook.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemNewBook.setText("New Book");
        menuItemNewBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewBookActionPerformed(evt);
            }
        });
        menuFile.add(menuItemNewBook);

        menuItemOpenBook.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemOpenBook.setText("Open Book");
        menuItemOpenBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenBookActionPerformed(evt);
            }
        });
        menuFile.add(menuItemOpenBook);

        menuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemSave.setText("Save");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSave);

        menuItemRename.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemRename.setText("Rename");
        menuItemRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRenameActionPerformed(evt);
            }
        });
        menuFile.add(menuItemRename);
        menuFile.add(jSeparator1);

        menuItemCloseBook.setText("Close Book");
        menuItemCloseBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCloseBookActionPerformed(evt);
            }
        });
        menuFile.add(menuItemCloseBook);

        menuPreview.setText("Preview");

        menuItemPreviewPage.setText("From Current Page");
        menuItemPreviewPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPreviewPageActionPerformed(evt);
            }
        });
        menuPreview.add(menuItemPreviewPage);

        menuItemPreviewBeginning.setText("From Beginning");
        menuItemPreviewBeginning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPreviewBeginningActionPerformed(evt);
            }
        });
        menuPreview.add(menuItemPreviewBeginning);

        menuItemPreviewChapter.setText("From Beginning of Chapter");
        menuItemPreviewChapter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPreviewChapterActionPerformed(evt);
            }
        });
        menuPreview.add(menuItemPreviewChapter);

        menuFile.add(menuPreview);

        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");

        menuItemNewPage.setText("New Page");
        menuItemNewPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewPageActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemNewPage);

        menuItemNewChapter.setText("New Chapter");
        menuItemNewChapter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewChapterActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemNewChapter);

        menuItemNewNode.setText("New Node");
        menuItemNewNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewNodeActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemNewNode);
        menuEdit.add(jSeparator2);

        menuItemDeletePage.setText("Delete Current Page");
        menuItemDeletePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDeletePageActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemDeletePage);

        menuItemDeleteChapter.setText("Delete Current Chapter");
        menuItemDeleteChapter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDeleteChapterActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemDeleteChapter);

        menuItemDeleteNode.setText("Delete Current Node");
        menuItemDeleteNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDeleteNodeActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemDeleteNode);

        jMenuBar1.add(menuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(internalFramePageEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(internalFrameEditor)
                    .addComponent(internalFrameLayout)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(internalFramePageEditor)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(internalFrameEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(internalFrameLayout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemNewBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewBookActionPerformed
        Popup p =new Popup("new book", this);
        p.setVisible(true);
    }//GEN-LAST:event_menuItemNewBookActionPerformed

    private void buttonNewChapterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewChapterActionPerformed
        Popup p = new Popup("chapter", this);
        p.setVisible(true);
    }//GEN-LAST:event_buttonNewChapterActionPerformed

    private void buttonNewPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewPageActionPerformed
        if (currentChapter!=null){
            Popup p = new Popup("page", this);
            p.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null,"Please create a chapter first.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buttonNewPageActionPerformed

    private void menuItemCloseBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCloseBookActionPerformed
        running(false);
        currentBook=null;
        currentChapter=null;
        currentPage=null;
        currentNode=null;
    }//GEN-LAST:event_menuItemCloseBookActionPerformed

    private void textFieldTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldTitleActionPerformed
        currentPage.setTitle(textFieldTitle.getText());
        updateUI();
    }//GEN-LAST:event_textFieldTitleActionPerformed

    private void listLayoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listLayoutMouseClicked
        int pos = listLayout.getSelectedIndex()+1;//keep track of selected index in list
        int chp=0;//track number of chapters counted
        int pg=0;//track number of pages counted
        int count=0;//the counter
        boolean isPage=false;//track whether selected item is a page
        ArrayList<Chapter> chapters=currentBook.getChapters();
        for (Chapter c: chapters){
            count++;
            chp++;
            pg=0;
            isPage=false;
            if (pos==count)
                break;
            ArrayList<Page> pages = c.getPages();
                for (Page p:pages){
                    count++;
                    pg++;
                    isPage=true;
                    if (pos==count)
                        break;
                }
            if (pos==count)//so that it breaks out of both loops if it is a page
                break;     //otherwise it would keep looping through the chapters and produce an error
        }
        setCurrentChapter(chp-1);//sets chapter
        if (isPage){//only sets page if page is selected
           setCurrentPage(pg-1);
           if (currentPage.getNodes()==null)
               currentNode=null;
        }
        updateUI();
    }//GEN-LAST:event_listLayoutMouseClicked

    private void menuItemRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRenameActionPerformed
        Popup p = new Popup("rename book", this);
        p.setVisible(true);
    }//GEN-LAST:event_menuItemRenameActionPerformed

    private void buttonDeletePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeletePageActionPerformed
        if (currentPage!=null){//to avoid errors
            int response=JOptionPane.showConfirmDialog(null,"Are you sure you want to delete " 
                + currentPage.getTitle() + " and all nodes associated with this page?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION){
                String title = deleteCurrentPage();
                JOptionPane.showMessageDialog(null, title + " has been deleted.");
            }
            else if (response == JOptionPane.NO_OPTION){
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"Page not selected.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeletePageActionPerformed

    private void buttonNewNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewNodeActionPerformed
        if (currentPage.getNodes().size()<5){
            Popup p = new Popup("node", this);
            p.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "Only a maximum of 5 nodes can be created per page.", "Attention", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buttonNewNodeActionPerformed

    private void textAreaBodyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaBodyKeyReleased
        if (currentPage!=null)
            currentPage.setStory(textAreaBody.getText());
        else
            JOptionPane.showMessageDialog(null,"Page not selected.", "Error", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_textAreaBodyKeyReleased

    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed
        if (currentBook!=null)
            fileWrite();
        else
            JOptionPane.showMessageDialog(null, "Please create a book first.", "Error", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuItemSaveActionPerformed

    private void listNodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listNodeMouseClicked
        setCurrentNode(listNode.getSelectedIndex());
    }//GEN-LAST:event_listNodeMouseClicked

    private void textFieldChapterTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldChapterTitleActionPerformed
        if (currentChapter!=null){
            currentChapter.setTitle(textFieldChapterTitle.getText());
            updateUI();
        }
        else
            JOptionPane.showMessageDialog(null,"Chapter not selected.", "Error", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_textFieldChapterTitleActionPerformed

    private void textFieldNodeTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldNodeTitleActionPerformed
        if (!textFieldNodeTitle.getText().equals("")){
            currentNode.setTitle(textFieldNodeTitle.getText());
            updateUI();
        }
        else
            JOptionPane.showMessageDialog(null, "Please enter a title.", "Error", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_textFieldNodeTitleActionPerformed

    private void comboChapterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboChapterItemStateChanged
        Chapter linked = currentBook.getChapters().get(comboChapter.getSelectedIndex());
        if (currentNode!=null)
            currentNode.setLinkedChapter(linked, comboChapter.getSelectedIndex());
        updateUI();
    }//GEN-LAST:event_comboChapterItemStateChanged

    private void comboPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboPageItemStateChanged
        Page linked = currentChapter.getPages().get(comboPage.getSelectedIndex());
        if (currentNode!=null)
            currentNode.setLinkedPage(linked, comboPage.getSelectedIndex());
        updateUI();
    }//GEN-LAST:event_comboPageItemStateChanged

    private void buttonDeleteNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteNodeActionPerformed
        if (currentNode!=null){//to avoid errors
            int response=JOptionPane.showConfirmDialog(null,"Are you sure you want to delete " 
                + currentNode.getTitle()+ "?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION){
                String title = deleteCurrentNode();
                JOptionPane.showMessageDialog(null, title + " has been deleted.");
            }
            else if (response == JOptionPane.NO_OPTION){
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"Page not selected.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeleteNodeActionPerformed

    private void menuItemNewPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewPageActionPerformed
        buttonNewPageActionPerformed(evt);
    }//GEN-LAST:event_menuItemNewPageActionPerformed

    private void menuItemNewChapterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewChapterActionPerformed
        buttonNewChapterActionPerformed(evt);
    }//GEN-LAST:event_menuItemNewChapterActionPerformed

    private void menuItemNewNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewNodeActionPerformed
        buttonNewNodeActionPerformed(evt);
    }//GEN-LAST:event_menuItemNewNodeActionPerformed

    private void buttonDeleteChapterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteChapterActionPerformed
        if (currentChapter!=null){//to avoid errors
            int response=JOptionPane.showConfirmDialog(null,"Are you sure you want to delete " 
                + currentChapter.getTitle() + " and all pages and nodes associated with this chapter?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION){
                String title = deleteCurrentChapter();
                JOptionPane.showMessageDialog(null, title + " has been deleted.");
            }
            else if (response == JOptionPane.NO_OPTION){
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"Page not selected.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeleteChapterActionPerformed

    private void menuItemDeletePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDeletePageActionPerformed
        buttonDeletePageActionPerformed(evt);
    }//GEN-LAST:event_menuItemDeletePageActionPerformed

    private void menuItemDeleteChapterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDeleteChapterActionPerformed
        buttonDeleteChapterActionPerformed(evt);
    }//GEN-LAST:event_menuItemDeleteChapterActionPerformed

    private void menuItemDeleteNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDeleteNodeActionPerformed
        buttonDeleteNodeActionPerformed(evt);
    }//GEN-LAST:event_menuItemDeleteNodeActionPerformed

    private void menuItemPreviewPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPreviewPageActionPerformed
        PreviewFrame p=new PreviewFrame("page", this);
        p.setVisible(true);
    }//GEN-LAST:event_menuItemPreviewPageActionPerformed

    private void menuItemOpenBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenBookActionPerformed
        fileRead();
    }//GEN-LAST:event_menuItemOpenBookActionPerformed

    private void menuItemPreviewBeginningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPreviewBeginningActionPerformed
        PreviewFrame p = new PreviewFrame("beginning", this);
        p.setVisible(true);
    }//GEN-LAST:event_menuItemPreviewBeginningActionPerformed

    private void menuItemPreviewChapterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPreviewChapterActionPerformed
        PreviewFrame p = new PreviewFrame("chapter", this);
        p.setVisible(true);
    }//GEN-LAST:event_menuItemPreviewChapterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    //GENERAL METHODS
    public void setCurrentChapter(int index){
        currentChapter=currentBook.getChapters().get(index);
        if (currentChapter.getPages().indexOf(currentPage)==-1){// to make sure that currentPage is consistent with current chapter
            currentPage=null;
            currentNode=null;
        }
        updateUI();
    }
    
    public void setCurrentPage (int index){
        currentPage=currentChapter.getPages().get(index);
        if (currentPage.getNodes().isEmpty())
            currentNode=null;
        else if (currentPage.getNodes().indexOf(currentNode)==-1)
            setCurrentNode(0);
        updateUI();
    }
    
    public void setCurrentNode(int index){
        currentNode=currentPage.getNodes().get(index);
        updateUI();
    }
    
    public String deleteCurrentChapter(){
        String title = currentChapter.getTitle();
        currentBook.getChapters().remove(currentChapter);
        currentChapter=null;
        updateUI();
        return title;
    }
    
    public String deleteCurrentPage(){
        String title = currentPage.getTitle();
        currentChapter.getPages().remove(currentPage);
        currentPage=null;
        currentNode=null;
        updateUI();
        return title;
    }
    
    public String deleteCurrentNode(){
        String title = currentNode.getTitle();
        currentPage.getNodes().remove(currentNode);
        currentNode=null;
        updateUI();
        return title;
    }
    
    public void createBook(String title){
        currentBook=new Book(title);
        running(true);
        setTitle(title);
        updateUI();
    }
    
    public void createChapter(String title){
        Chapter c = new Chapter(title);
        currentChapter = c;
        currentBook.addChapter(c);
        updateUI();
    }
    
    public void createPage(String title){
        Page p= new Page(title);
        currentPage=p;
        currentChapter.addPage(p, null);
        updateUI();
    }
    
    public void createNode(String title){
        int pgPos= currentChapter.getPages().indexOf(currentPage);
        int chpPos=currentBook.getChapters().indexOf(currentChapter);
        Node n = new Node(title, currentPage, currentChapter, pgPos, chpPos);
        currentNode=n;
        currentPage.addNode(n);
        updateUI();
    }
    
    public void updateBookName(String s){
        currentBook.setTitle(s);
        setTitle(s);
    }
    
    //for PreviewFrame
    public Book getCurrentBook(){
        return currentBook;
    }
    
    public Chapter getCurrentChapter(){
        return currentChapter;
    }
    
    public Page getCurrentPage(){
        return currentPage;
    }
    
    //RUNNING METHODS
    //used to gate what user can access based on whether a component has been created/is selected
    private void running(boolean state){
        internalFramePageEditor.setVisible(state);
        internalFrameEditor.setVisible(state);
        internalFrameLayout.setVisible(state);
        menuItemSave.setEnabled(state);
        menuItemRename.setEnabled(state);
        menuPreview.setEnabled(state);
        menuItemCloseBook.setEnabled(state);
        menuItemNewChapter.setEnabled(state);
    }
    
    private void runningChp(boolean state){
        textFieldChapterTitle.setEnabled(state);
        buttonNewPage.setEnabled(state);
        buttonDeleteChapter.setEnabled(state);
        menuItemNewPage.setEnabled(state);
        menuItemDeleteChapter.setEnabled(state);
    }
    
    private void runningPg(boolean state){
        textFieldTitle.setEnabled(state);
        textAreaBody.setEnabled(state);
        buttonNewNode.setEnabled(state);
        menuItemNewNode.setEnabled(state);
        buttonDeletePage.setEnabled(state);
        menuItemDeletePage.setEnabled(state);
    }
    
    private void runningNode(boolean state){
        textFieldNodeTitle.setEnabled(state);
        comboChapter.setEnabled(state);
        comboPage.setEnabled(state);
        buttonDeleteNode.setEnabled(state);
        menuItemDeleteNode.setEnabled(state);
    }
    
    //UPDATE UI
    private void updateUI(){
    //updates everything on the UI to match the files
    //should be called after every major change
        if(currentBook!= null){//to avoid errors

            //UPDATING THE LAYOUT LIST
            ArrayList<Chapter> chapters=currentBook.getChapters();
            ArrayList<String> temp=new ArrayList<String>();
            //sets up the arraylist with the correct format of chapters and pages
            for (Chapter c: chapters){
                temp.add(c.getTitle());
                ArrayList<Page> pages = c.getPages();
                    for (Page p:pages)
                        temp.add("   " + p.getTitle());
            }
            //converts arraylist to array and sends it to the UI list
            String[] layout=new String[temp.size()];
            for (int k = 0; k<layout.length; k++)
                layout[k]=temp.get(k);
            listLayout.setListData(layout);

            //UPDATING CHAPTERS AND PAGES
            if (currentChapter!= null){
                textFieldChapterTitle.setText(currentChapter.getTitle());
                runningChp(true);
            }
            else{
                runningChp(false);
                textFieldChapterTitle.setText("");
            }
            if (currentPage != null){
                textFieldTitle.setText(currentPage.getTitle());
                textAreaBody.setText(currentPage.getStory());
                runningPg(true);
            }
            else{
                runningPg(false);
                textFieldTitle.setText("");
                textAreaBody.setText("");
            }
        }
        
        //UPDATING NODES    
        if (currentNode!=null){
            runningNode(true);
            
            //update text field
            textFieldNodeTitle.setText(currentNode.getTitle());
            
            //update combo boxes
            comboChapter.removeAll();
            comboPage.removeAll();
            ArrayList<Chapter> chapters=currentBook.getChapters();
            for (Chapter c: chapters)
                comboChapter.addItem(c.getTitle());
            comboChapter.select(currentNode.getChpPos());
            if (currentNode.getLinkedChapter()!=null){
                ArrayList<Page> pages = currentNode.getLinkedChapter().getPages();
                for (Page p: pages)
                    comboPage.addItem(p.getTitle());
                if (currentNode.getPgPos()!=-1)
                    comboPage.select(currentNode.getPgPos());
                else 
                    comboPage.select(null);
            }
            
            //update nodes list
            ArrayList<Node> tempNode = currentPage.getNodes();
            String[] nodeLayout = new String[tempNode.size()];
            for (int k=0; k<tempNode.size(); k++)
                nodeLayout[k]=tempNode.get(k).getTitle();
            listNode.setListData(nodeLayout);
        }
        else{
            runningNode(false);
            textFieldNodeTitle.setText("");
            comboPage.removeAll();
            comboChapter.removeAll();
            String[] temp = new String[0];
            listNode.setListData(temp);
        }
    }

    //FILE READ/WRITE
    private void fileWrite(){
        String currentDirectory = System.getProperty("user.dir");
        String fullFileName = currentDirectory + "/book.txt";
        System.out.println("Saving to " + currentDirectory);
        try {
            FileWriter fw = new FileWriter(fullFileName);
            BufferedWriter br = new BufferedWriter(fw);
            br.write(currentBook.getTitle() + "\n");        //add a newline character
            ArrayList<Chapter> book = currentBook.getChapters();
            //loop through arraylist and write book
            for( Chapter c:book) {
                br.write("* " + c.getTitle() + "\n");
                ArrayList<Page> pages = c.getPages();
                for (Page p: pages){
                    br.write("** " + p.getTitle() + " ** " + p.getStory() + "\n**\n");
                    ArrayList<Node> nodes = p.getNodes();
                    for (Node n: nodes)
                        br.write("*** " + n.getTitle() + " *** " + n.getChpPos() + " *** " + n.getPgPos() + "\n");
                }
            }
            br.write("end\n");
            br.close();
        }
        catch(Exception e) {
            System.out.println("");
            System.out.println("Error writing to file");
        }
    }
    
    private void fileRead() {
        String currentDirectory = System.getProperty("user.dir");
        String fullFileName = currentDirectory + "/book.txt";
        System.out.println("File path " + fullFileName);
        System.out.println("Reading file...");
        currentBook=null;
        currentChapter=null;
        currentPage=null;
        currentNode=null;
        try {   
            FileReader fr = new FileReader(fullFileName);
            BufferedReader br = new BufferedReader(fr);
            String line=br.readLine();
            currentBook= new Book(line);
            System.out.println("Book title: " + line);
            
            while( (line = br.readLine()) != null) {
                //read chapters
                if (line.indexOf("* ")==0){
                    currentChapter= new Chapter(line.substring(2));
                    currentBook.addChapter(currentChapter);
                    System.out.println("Chapter: " + currentChapter.getTitle());
                }
                //read pages
                else if (line.indexOf("** ")==0){
                    int pos = line.indexOf(" ** ");
                    String title = line.substring(3, pos);
                    String body = line.substring(pos + 4);
                    while (!(line=br.readLine()).equals("**"))
                        body=body + "\n" + line;
                    currentPage = new Page(title);
                    currentPage.setStory(body);
                    currentChapter.addPage(currentPage, null);
                    System.out.println("  Page: " + currentPage.getTitle());
                }
                //read nodes
                else if (line.indexOf("*** ")==0){
                    int pos = line.indexOf(" *** ");
                    String title = line.substring(4, pos);
                    line=line.substring(pos + 5);
                    pos=line.indexOf(" *** ");
                    int chpPos=Integer.parseInt(line.substring(0,pos));
                    line=line.substring(pos+5);
                    int pgPos=Integer.parseInt(line);
                    currentNode=new Node(title, pgPos, chpPos);
                    currentPage.addNode(currentNode);
                    System.out.println("    Node: " + currentNode.getTitle() + " (" + currentNode.getChpPos() + ", " + currentNode.getPgPos() + ")");
                }
            }
            br.close();
            System.out.println("");
            System.out.println("Reading nodes...");
            readNodes();
            running(true);
            updateUI();
        }
        catch(Exception e) {
            System.out.println("");
            System.out.println("An error occured with file reading");
            currentBook=null;
            currentChapter=null;
            currentPage=null;
            currentNode=null;
        }
    }
    
    //only used in file read
    private void readNodes(){
        ArrayList<Chapter> chapters = currentBook.getChapters();
        for(Chapter c: chapters){
            ArrayList<Page> pages = c.getPages();
            System.out.println(c.getTitle());
            for (Page p: pages){
                ArrayList<Node> nodes = p.getNodes();
                System.out.println("  " + p.getTitle());
                for (Node n: nodes){
                    System.out.print("    " + n.getTitle());
                    Chapter temp = chapters.get(n.getChpPos());
                    if (n.getChpPos()!=-1){
                        n.linkChapter(temp);
                        System.out.print(" - " + temp.getTitle());
                        if (n.getPgPos()!=-1){
                            n.linkPage(temp.getPages().get(n.getPgPos()));
                            System.out.println(" - " + n.getLinkedPage().getTitle());
                        }
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDeleteChapter;
    private javax.swing.JButton buttonDeleteNode;
    private javax.swing.JButton buttonDeletePage;
    private javax.swing.JButton buttonNewChapter;
    private javax.swing.JButton buttonNewNode;
    private javax.swing.JButton buttonNewPage;
    private java.awt.Choice comboChapter;
    private java.awt.Choice comboPage;
    private javax.swing.JInternalFrame internalFrameEditor;
    private javax.swing.JInternalFrame internalFrameLayout;
    private javax.swing.JInternalFrame internalFramePageEditor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JList<String> listLayout;
    private javax.swing.JList<String> listNode;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItemCloseBook;
    private javax.swing.JMenuItem menuItemDeleteChapter;
    private javax.swing.JMenuItem menuItemDeleteNode;
    private javax.swing.JMenuItem menuItemDeletePage;
    private javax.swing.JMenuItem menuItemNewBook;
    private javax.swing.JMenuItem menuItemNewChapter;
    private javax.swing.JMenuItem menuItemNewNode;
    private javax.swing.JMenuItem menuItemNewPage;
    private javax.swing.JMenuItem menuItemOpenBook;
    private javax.swing.JMenuItem menuItemPreviewBeginning;
    private javax.swing.JMenuItem menuItemPreviewChapter;
    private javax.swing.JMenuItem menuItemPreviewPage;
    private javax.swing.JMenuItem menuItemRename;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenu menuPreview;
    private javax.swing.JTabbedPane tabbedPaneEditor;
    private javax.swing.JTabbedPane tabbedPaneLayout;
    private javax.swing.JTextArea textAreaBody;
    private javax.swing.JTextField textFieldChapterTitle;
    private javax.swing.JTextField textFieldNodeTitle;
    private javax.swing.JTextField textFieldTitle;
    // End of variables declaration//GEN-END:variables
}
